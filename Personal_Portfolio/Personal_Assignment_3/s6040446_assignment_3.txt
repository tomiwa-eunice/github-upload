Name: Owoeye Tomiwa Eunice
Student Number: s6040446

Assignment 3: Raster and Vector Data

Task 1
# 1
Changes the OS directory to the filepath, (which contains the .tif file).
Opens the raster file using the method '.Open' in 'gdal' and assigns it to a variable 'nlWindClass2Ds'.

# 2
Gets the raster size in two dimensions (x,y) and assigns it them to variables 'nlWindClass2X' and 'nlWindClass2Y'
respectively, then prints them.
Gets and assigns the projection of the GeoTiff file to a variable 'rasterP' and prints this.
Gets the geotransform information, i.e. the top left coordinates, pixel sizes and rotation,
then assigns to the variable 'rasterG'.
Checks if rasterG is not None, then prints the geotransform details using indexing
Gets and prints the number of bands in the file using '.RasterCount' attribute and assigns it to a variable 'count'.

# 3
Access the band information for the first band and assigns it to variable 'band'.
Gets the band statistics and prints out the statistical information using a print formatting statement
which prints out the data in a 2 decimal float type.
Gets the no data value and prints it out.

# 4
Defining the function 'rasterizeLayer' which has two parameters 'referenceRaster' and 'layer'.
It also has a docstring explaining the parameters and the expected return value for the function.

# 5
Creates a new driver in the memory.
Creates a new raster in the driver and defines the raster parameters based on the reference raster and also sets the
data type of the new raster to 'GDT_ Float32'.
Sets the new raster projection and geotransform information to that of the reference raster.
Creates a band in the new raster and sets a pixel no data value.

# 6
Rasterizes the vector layer, using the output raster dataset as reference and specifying that band 1 is to be updated,
with the "burn_values=[1]" all interested pixel values are assigned the value 1, and with options "all_touched=true"
all the pixels where the vector layer touches becomes rasterized.

# 7
Reads the datasets of the new and old raster as a numpy array and assigns it to the variable 'newPx' and 'nlWindPx'
respectively.

# 8
Assigns the product of the datasets of the new and old raster numpy array to the variable 'windValues', which extracts
the pixels by performing a raster multiplication, then returns the variable to the function 'rasterizeLayer' when called.

# 9
Opens the vector shapefile using the method '.Open' in 'ogr' and assigns it to the variable 'parksDs'.
Gets the layer in the file and assigns it to the variable 'parksLayer'.

# 10
Iterates over each farm type in the farms list.

# 11
Filters all the farm attributes in the parksLayer that has the filter value equal to 'i' in the for loop,
e.g. farms = 'farm1'.

# 12
Calls the function defined in block 4, and rasterizes the vector layer 'parkslayer' using the 'nlWindClass2Ds'
as the reference raster and assigns it to the variable windValues.

# 13
Re-assigns the variable 'windValues' by using the boolean operator to check for all wind values greater
than the no-data values (0), this filters out the no data values.

# 14
prints the statistical values i.e. the minimum, maximum and mean values of the wind values for each farm type
using a custom print statement.

# 15
Flushes and cleans the memory for the raster and vector datafiles.



Task 2:
Error 1
	# 10
a)	Error Message:
                  File "C:/GeoComProjects/Personal_Portfolio/Personal_Assignment_3/s6040446_assignment_3.py", line 62
                    for i in ['farm1','farm2','farm3','farm4':
                                                            ^
                  SyntaxError: invalid syntax
b)	Explanation: missing syntax, which is the closing square bracket ‘]’.
c)	Correction: the square bracket was inputted at the right place.
d)	Corrected Block:
                    # 10
                    for i in ['farm1', 'farm2', 'farm3', 'farm4']:

Error 2
	# 1
a)	Error Message:
                Traceback (most recent call last):
                  File "C:/GeoComProjects/Personal_Portfolio/Personal_Assignment_3/s6040446_assignment_3.py",
                line 6, in <module> os.chdir(r"C:\Users\piscobexigacalistlf\Documents\ScientificGeocomputing\Assigments\3")
                FileNotFoundError: [WinError 3] The system cannot find the path specified:
                'C:\\Users\\piscobexigacalistlf\\Documents\\ScientificGeocomputing\\Assigments\\3'
b)	Explanation: wrong file path.
c)	Correction: the file path was changed to where the file is stored in the directory.
d)	Corrected Block:
                    # 1
                    os.chdir(r"C:\GeoComProjects\Personal_Portfolio\Personal_Assignment_3")

Error 3
    # 1
a)	Error Message:
                ERROR 4: nl_cf.tif: No such file or directory
                Traceback (most recent call last):
                  File "C:/GeoComProjects/Personal_Portfolio/Personal_Assignment_3/s6040446_assignment_3.py",
b)	Explanation: wrong filename.
c)	Correction: the corrected filename was inputted.
d)	Corrected Block:
                    # 1
                    os.chdir(r"C:\GeoComProjects\Personal_Portfolio\Personal_Assignment_3")
                    nlWindClass2Ds = gdal.Open('nl_cf_250_class2.tif')

Error 4
    # 14
a)	Error Message:
                Traceback (most recent call last):
                  File "C:/GeoComProjects/Personal_Portfolio/Personal_Assignment_3/s6040446_assignment_3.py", line 70, in <module>
                    print("Stat values for", i, '--> Min:', windValues.m, 'Max:', windValues.ma, 'Mean:', windValues.m)
                AttributeError: 'numpy.ndarray' object has no attribute 'm'
b)	Explanation: wrong method for getting the “minimum”, “maximum” and “mean” was used in the library ‘numpy’.
c)	Correction: the corrected method instead of the attribute, which is “.min()”, “.max()” and “.mean()” was used to avoid semantic errors.
d)	Corrected Block:
                    # 14
                    print("Stat values for", i, '--> Min:', windValues.min(), 'Max:', windValues.max(), 'Mean:', windValues.mean())



Task 3:
Visualizing the raster image in # 3
 3
# Access to band Information
band = nlWindClass2Ds.GetRasterBand(1)
stats = band.GetStatistics(False, True)         # determining band statistics
print("min = %.2f max = %.2f mean = %.2f std = %.2f" % (stats[0], stats[1], stats[2], stats[3]))
print("no data value:", band.GetNoDataValue())

# visualizing the raster image
# define the topleft pixels and window size
xoff = 0
yoff = 0
win_xsize = nlWindClass2X
win_ysize = nlWindClass2Y

cf_arr = gdarr.BandReadAsArray(band, xoff, yoff, win_xsize, win_ysize)      # read a single band as a two-dim array
cf_arr[cf_arr == -999.0] = None                                             # removes no data from the image plot

plt.imshow(cf_arr)
plt.colorbar()
plt.title('Raster Image showing \n Capacity Factor for The Netherlands')
plt.show()
print()



Task 4:
Based on the analysis of the Capacity Factors (CF)
a)  Maximum CF for all of the Netherlands = 0.58
    Minimum CF for all of the Netherlands = 0.24
    Average CF for all of the Netherlands = 0.40

b)  Relating the average capacity factor of the Netherlands with the average wind values of the farms gotten from
    block 10 to block 14 in the script;
    i.e. Average CF for all of The Netherland = 0.40
         Aprox. Average windvalues for farm1 = 0.38
         Aprox. Average windvalues for farm2 = 0.43
         Aprox. Average windvalues for farm3 = 0.30
         Aprox. Average windvalues for farm4 = 0.41
    the farms that should be considered for investment are Farm 2 and Farm 4, since they have comparable average capacity
    factors with that of the Netherlands;
    but the best farm to invest in, is Farm 2.



Task 5:
Additional block to show the minimum and maximum values per farm in a stacked bar-chart
min_windValues = []
max_windValues = []
farms = ['farm1', 'farm2', 'farm3', 'farm4']
for i in farms:
    parksLayer.SetAttributeFilter("farms = '" + i + "'")
    windValues = rasterizeLayer(nlWindClass2Ds, parksLayer)
    windValues = windValues[windValues > 0]
    min_windValues.append(windValues.min())
    max_windValues.append(windValues.max())
print(max_windValues, min_windValues)

# create a stacked bar chart
plt.bar(farms,min_windValues, color='r', label='Min')
plt.bar(farms, max_windValues, bottom=min_windValues, color='b', label='Max')
plt.xlabel('Farms')
plt.xticks(farms, rotation=30)
plt.ylabel('Wind values')
plt.title('Statistical Chart showing \n Minimum and Maximum Wind Values per Farm')
plt.legend(loc='upper right')
plt.grid(linestyle=':')
plt.show()