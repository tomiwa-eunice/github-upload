Question 3a
Script with proper docstring for the function generate_VI
def generate_VI(image,band1,band2):
    """
    Returns the VI value for the image using two bands.

    :param image: image to be accessed and read for image classification
    :param band1: first band read as a numpy array for VI analysis
    :param band2: second band read as a numpy array for VI analysis
    :return: the VI value for that particular image in a numpy array
    :assumptions: the function takes into assumption that band 1 and 2 are the best band for analysing VI at a
    particular threshold and the values in are of type float.
    """
    # gets the band1 in the image
    imageBand1 = image.GetRasterBand(band1)
    # reads band1 as a numpy array
    imagePx1 = gdarr.BandReadAsArray(imageBand1, 0, 0, image.RasterXSize, image.RasterYSize)
    # reads the numpy array as a float32 data type
    imagePx1 = imagePx1.astype(np.float32)
    # clears the cache
    imageBand1 = None

    imageBand2 = image.GetRasterBand(band2)
    imagePx2 = gdarr.BandReadAsArray(imageBand2, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx2 = imagePx2.astype(np.float32)
    imageBand2 = None

    # computes the vi using matrix function
    vi = (imagePx2 - imagePx1) / (imagePx2 + imagePx1)
    imagePx1 = None
    imagePx2 = None
    return vi


Question 3b
Yes, this function works for deriving NDVI.
It can be used by slotting the band 4 (red) and band 8 (NIR) for the band 1 and band 2 parameters in the function.
The code lines with float32 are needed to allow decimal numbers for the computation of the vi using the algebraic methods.


Question 3c
The generate_VI function does not work for computing SVI because the function only has two(2) parameters.
So for the function to work parameter value for band 2 must be provided.
def generate_VI(image,band1,band2,band3):
    """
    Returns the SVI value for the image using three bands.

    :param image: image to be accessed and read for image classification
    :param band1: first band read as a numpy array for SVI analysis
    :param band2: second band read as a numpy array for SVI analysis
    :param band3: third band read as a numpy array for SVI analysis
    :return: the SVI value for that particular image in a numpy array
    """

    imageBand1 = image.GetRasterBand(band1)
    imagePx1 = gdarr.BandReadAsArray(imageBand1, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx1 = imagePx1.astype(np.float32)
    imageBand1 = None

    imageBand2 = image.GetRasterBand(band2)
    imagePx2 = gdarr.BandReadAsArray(imageBand2, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx2 = imagePx2.astype(np.float32)
    imageBand2 = None

    imageBand3 = image.GetRasterBand(band3)
    imagePx3 = gdarr.BandReadAsArray(imageBand3, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx3 = imagePx3.astype(np.float32)
    imageBand3 = None

    svi = (imagePx2 - imagePx1) / (imagePx2 + imagePx1 - imagePx3)

    imagePx1 = None
    imagePx2 = None
    imagePx3 =None

    return svi

svi_value = generate_VI(image, band 4, band 8, band 2)
print(svi_value)

Question 3d
The parameters of the constants c0, c1, c2 and c3 should be provided to the SVI function to call the EVI function.

def generate_VI(image,band1,band2,band3,c0, c1, c2, c3):
    """
    Returns the EVI value for the image using three bands.

    :param image: image to be accessed and read for image classification
    :param band1: first band read as a numpy array for EVI analysis
    :param band2: second band read as a numpy array for EVI analysis
    :param band3: third band read as a numpy array for EVI analysis
    :return: the EVI value for that particular image in a numpy array
    :param c0: float constant for computing EVI
    :param c1: integer constant for computing EVI
    :param c2: float constant for computing EVI
    :param c3: integer constant for computing EVI
    """


    imageBand1 = image.GetRasterBand(band1)
    imagePx1 = gdarr.BandReadAsArray(imageBand1, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx1 = imagePx1.astype(np.float32)
    imageBand1 = None

    imageBand2 = image.GetRasterBand(band2)
    imagePx2 = gdarr.BandReadAsArray(imageBand2, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx2 = imagePx2.astype(np.float32)
    imageBand2 = None

    imageBand3 = image.GetRasterBand(band3)
    imagePx3 = gdarr.BandReadAsArray(imageBand3, 0, 0, image.RasterXSize, image.RasterYSize)
    imagePx3 = imagePx3.astype(np.float32)
    imageBand3 = None

    # vi = (imagePx2 - imagePx1) / (imagePx2 + imagePx1)
    svi = (imagePx2 - imagePx1) / (imagePx2 + imagePx1 - imagePx3)
    evi = (c0 * (imagePx2 - imagePx1)) / (imagePx2 + c1 * imagePx1 - c2 *imagePx3 + c3)

    imagePx1 = None
    imagePx2 = None
    imagePx3 =None

    return evi

evi_value = generate_VI(myImage, band 4, band 8, band 2, 2.5, 6, 7.5, 1)
print(evi_value)



Question 3e
Yes the function can be used to compute NDVI
By substituting the constants;
c0 = 1
c1 = 1
c2 = 0
c3 = 0

NDVI = generate_VI(myImage, band 4, band 8, band 2, 1, 1, 0, 0)
print(NDVI)
